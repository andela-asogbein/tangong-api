{"version":3,"sources":["../../src/models/user.model.js"],"names":["express","require","app","mongoose","jwt","Schema","crypto","bcrypt","UserSchema","username","type","String","required","index","unique","email","resetPasswordToken","resetPasswordExpires","Date","salt","hash","role","enum","default","timeStamps","methods","setPassword","password","randomBytes","toString","pbkdf2Sync","comparePassword","generateJWT","today","exp","setDate","getDate","token","sign","_id","name","parseInt","getTime","model"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,MAAMF,SAAV;AACA,IAAIG,WAAWF,QAAQ,UAAR,CAAf;AACA,IAAIG,MAAMH,QAAQ,cAAR,CAAV;;AAEA,IAAII,SAASF,SAASE,MAAtB;AACA,IAAIC,SAASL,QAAQ,QAAR,CAAb;AACA,IAAIM,SAASN,QAAQ,eAAR,CAAb;;AAEA,IAAIO,aAAa,IAAIH,MAAJ,CAAW;AACxBI,cAAU;AACNC,cAAMC,MADA;AAENC,kBAAU,sBAFJ;AAGNC,eAAO;AACHC,oBAAQ;AADL;AAHD,KADc;AAQxBC,WAAO;AACHL,cAAMC,MADH;AAEHC,kBAAU,aAFP;AAGHC,eAAO;AACHC,oBAAQ;AADL;AAHJ,KARiB;AAexBE,wBAAoBL,MAfI;AAgBxBM,0BAAsBC,IAhBE;AAiBxBC,UAAM;AACFT,cAAMC;AADJ,KAjBkB;AAoBxBS,UAAM;AACFV,cAAMC;AADJ,KApBkB;AAuBxBU,UAAM;AACFX,cAAMC,MADJ;AAEFW,cAAM,CAAC,MAAD,EAAS,OAAT,CAFJ;AAGFC,iBAAS;AAHP;AAvBkB,CAAX,EA4Bd;AACCC,gBAAY;AADb,CA5Bc,CAAjB;;AAgCAhB,WAAWiB,OAAX,CAAmBC,WAAnB,GAAiC,UAASC,QAAT,EAAmB;AAChD,SAAKR,IAAL,GAAYb,OAAOsB,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAZ;AACA,SAAKT,IAAL,GAAYd,OAAOwB,UAAP,CAAkBH,QAAlB,EAA4B,KAAKR,IAAjC,EAAuC,IAAvC,EAA6C,EAA7C,EAAiDU,QAAjD,CAA0D,KAA1D,CAAZ;AACH,CAHD;;AAKArB,WAAWiB,OAAX,CAAmBM,eAAnB,GAAqC,UAASJ,QAAT,EAAmB;AACpD,QAAIP,OAAOd,OAAOwB,UAAP,CAAkBH,QAAlB,EAA4B,KAAKR,IAAjC,EAAuC,IAAvC,EAA6C,EAA7C,EAAiDU,QAAjD,CAA0D,KAA1D,CAAX;AACA,WAAO,KAAKT,IAAL,KAAcA,IAArB;AACH,CAHD;;AAKAZ,WAAWiB,OAAX,CAAmBO,WAAnB,GAAiC,YAAW;AACxC,QAAIC,QAAQ,IAAIf,IAAJ,EAAZ;AACA,QAAIgB,MAAM,IAAIhB,IAAJ,CAASe,KAAT,CAAV;AACAC,QAAIC,OAAJ,CAAYF,MAAMG,OAAN,KAAkB,EAA9B;AACA,QAAIC,QAAQjC,IAAIkC,IAAJ,CAAS;AACjBC,aAAK,KAAKA,GADO;AAEjBC,cAAM,KAAKA,IAFM;AAGjBzB,eAAO,KAAKA,KAHK;AAIjBmB,aAAKO,SAASP,IAAIQ,OAAJ,KAAgB,IAAzB;AAJY,KAAT,EAKT,WALS,CAAZ;AAMA,SAAKL,KAAL,GAAaA,KAAb;AACA,WAAOA,KAAP;AACH,CAZD;;AAcAlC,SAASwC,KAAT,CAAe,MAAf,EAAuBnC,UAAvB","file":"user.model.js","sourcesContent":["var express = require('express');\nvar app = express();\nvar mongoose = require('mongoose');\nvar jwt = require('jsonwebtoken');\n\nvar Schema = mongoose.Schema;\nvar crypto = require('crypto');\nvar bcrypt = require('bcrypt-nodejs');\n\nvar UserSchema = new Schema({\n    username: {\n        type: String,\n        required: 'Enter valid username',\n        index: {\n            unique: true\n        }\n    },\n    email: {\n        type: String,\n        required: 'Enter email',\n        index: {\n            unique: true\n        }\n    },\n    resetPasswordToken: String,\n    resetPasswordExpires: Date,\n    salt: {\n        type: String\n    },\n    hash: {\n        type: String\n    },\n    role: {\n        type: String,\n        enum: ['user', 'admin'],\n        default: 'user'\n    }\n}, {\n    timeStamps: true\n});\n\nUserSchema.methods.setPassword = function(password) {\n    this.salt = crypto.randomBytes(16).toString('hex');\n    this.hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');\n};\n\nUserSchema.methods.comparePassword = function(password) {\n    var hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');\n    return this.hash === hash;\n};\n\nUserSchema.methods.generateJWT = function() {\n    var today = new Date();\n    var exp = new Date(today);\n    exp.setDate(today.getDate() + 60);\n    var token = jwt.sign({\n        _id: this._id,\n        name: this.name,\n        email: this.email,\n        exp: parseInt(exp.getTime() / 1000)\n    }, 'secretKey');\n    this.token = token;\n    return token;\n};\n\nmongoose.model('User', UserSchema);\n"]}