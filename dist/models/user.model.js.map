{"version":3,"sources":["../../src/models/user.model.js"],"names":["express","require","app","mongoose","Schema","bcrypt","UserSchema","username","type","String","required","index","unique","password","select","email","resetPasswordToken","resetPasswordExpires","Date","versionKey","pre","next","user","isModified","hash","err","methods","comparePassword","model"],"mappings":"AAAA;;AAEA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,MAAMF,SAAV;AACA,IAAIG,WAAWF,QAAQ,UAAR,CAAf;;AAEA,IAAIG,SAASD,SAASC,MAAtB;;AAEA;AACA;AACA,IAAIC,SAASJ,QAAQ,eAAR,CAAb;AACA;;AAEA;AACA;AACA;;AAEA,IAAIK,aAAa,IAAIF,MAAJ,CAAW;AAC1BG,YAAU;AACRC,UAAMC,MADE;AAERC,cAAU,sBAFF;AAGRC,WAAO;AACLC,cAAQ;AADH;AAHC,GADgB;AAQ1BC,YAAU;AACRL,UAAMC,MADE;AAERC,cAAU,mBAFF;AAGRI,YAAQ;AAHA,GARgB;AAa1BC,SAAO;AACLP,UAAMC,MADD;AAELC,cAAU,aAFL;AAGLC,WAAO;AACLC,cAAQ;AADH;AAHF,GAbmB;AAoB1BI,sBAAoBP,MApBM;AAqB1BQ,wBAAsBC;AArBI,CAAX,EAsBd;AACDC,cAAY;AADX,CAtBc,CAAjB;;AA0BAb,WAAWc,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACpC,MAAIC,OAAO,IAAX;AACA,MAAIA,KAAKC,UAAT,EAAqB;AACnBlB,WAAOmB,IAAP,CAAYF,KAAKT,QAAjB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuC,UAASY,GAAT,EAAcD,IAAd,EAAoB;AACzD,UAAIC,GAAJ,EAAS;AACP,eAAOJ,KAAKI,GAAL,CAAP;AACD;AACDH,WAAKT,QAAL,GAAgBW,IAAhB;AACAH;AACD,KAND;AAOD,GARD,MAQO;AACL,WAAOA,MAAP;AACD;AACF,CAbD;;AAeAf,WAAWoB,OAAX,CAAmBC,eAAnB,GAAqC,UAASd,QAAT,EAAmB;AACtD,MAAIS,OAAO,IAAX;AACA;AACA,SAAO,IAAP;AACD,CAJD;;AAMA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAnB,SAASyB,KAAT,CAAe,MAAf,EAAuBtB,UAAvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"user.model.js","sourcesContent":["'use strict';\n\nvar express = require('express');\nvar app = express();\nvar mongoose = require('mongoose');\n\nvar Schema = mongoose.Schema;\n\n// var passport = require('passport');\n// var LocalStrategy = require('passport-local').Strategy;\nvar bcrypt = require('bcrypt-nodejs');\n// var session = require('express-session');\n\n// app.use(session({secret: 'session secret key', resave: true, saveUninitialized: true}));\n// app.use(passport.initialize());\n// app.use(passport.session());\n\nvar UserSchema = new Schema({\n  username: {\n    type: String,\n    required: 'Enter valid username',\n    index: {\n      unique: true\n    }\n  },\n  password: {\n    type: String,\n    required: 'Choose a password',\n    select: false\n  },\n  email: {\n    type: String,\n    required: 'Enter email',\n    index: {\n      unique: true\n    }\n  },\n  resetPasswordToken: String,\n  resetPasswordExpires: Date\n}, {\n  versionKey: false\n});\n\nUserSchema.pre('save', function(next) {\n  var user = this;\n  if (user.isModified) {\n    bcrypt.hash(user.password, null, null, function(err, hash) {\n      if (err) {\n        return next(err);\n      }\n      user.password = hash;\n      next();\n    });\n  } else {\n    return next();\n  }\n});\n\nUserSchema.methods.comparePassword = function(password) {\n  var user = this;\n  // return bcrypt.compareSync(password, user.password);\n  return true;\n};\n\n// UserSchema.pre('save', function(next) {\n//   var user = this;\n//   var SALT_FACTOR = 5;\n\n//   if (!user.isModified('password')) return next();\n\n//   bcrypt.genSalt(SALT_FACTOR, function(err, salt) {\n//     if (err) return next(err);\n\n//     bcrypt.hash(user.password, salt, null, function(err, hash) {\n//       if (err) return next(err);\n//       user.password = hash;\n//       next();\n//     });\n//   });\n// });\n\n// UserSchema.methods.comparePassword = function(candidatePassword, cb){\n//   bcrypt.compare(candidatePassword, this.password, function(err, isMatch){\n//     if(err) return cb(err);\n//     cb(null, isMatch);\n//   });\n// };\n\nmongoose.model('User', UserSchema);\n\n// passport.use(new LocalStrategy(function(username, password, done){\n//   User.findOne({ username: username}, function(err, user){\n//     if(err) return done(err);\n//     if(!user) return done(null, false, { message: 'Incomming username' });\n//     user.comparePassword(password, function(err, isMatch){\n//       if(isMatch){\n//         return done(null, user);\n//       }else{\n//         return done(null, false, {message: 'Incorrect password.'});\n//       }\n//     });\n//   });\n// }));\n\n// passport.serializeUser(function(user, done){\n//   done(null, user.id);\n// });\n\n// passport.deserializeUser(function(id, done){\n//   User.findById(id, function(err, user){\n//     done(err, user);\n//   });\n// });\n"]}