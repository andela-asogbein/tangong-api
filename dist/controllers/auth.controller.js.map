{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["mongoose","require","crypto","async","jwt","superSecret","User","model","module","exports","authenticateUser","req","res","body","email","password","status","json","message","findOne","err","user","comparePassword","token","generateJWT","name","verifyToken","next","headers","verify","isAdmin","role","forgot","waterfall","done","randomBytes","buf","toString","resetPasswordToken","resetPasswordExpires","Date","now","save","transporter","nodemailer","createTransport","mailOptions","to","from","subject","text","sendMail","reset","params","$gt","undefined","result","console","log"],"mappings":"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","file":"auth.controller.js","sourcesContent":["var mongoose = require('mongoose');\nrequire(\"../models/user.model\");\nrequire(\"../models/gig.model\");\n\nvar crypto = require('crypto');\nvar async = require('async');\nvar jwt = require('jsonwebtoken');\nvar superSecret = 'tangoforme';\n\nvar User = mongoose.model(\"User\");\n\nmodule.exports = {\n    authenticateUser: function(req, res) {\n        if (!req.body.email || !req.body.password) {\n            return res.status(400).json({\n                message: 'Email and password required!'\n            });\n        }\n        User.findOne({\n            email: req.body.email\n        }, function(err, user) {\n            if (err) {\n                return res.status(400).json(err);\n            }\n            if (user) {\n                if (user.comparePassword(req.body.password)) {\n                    return res.status(200).json({\n                        token: user.generateJWT(),\n                        user: user.name\n                    });\n                } else {\n                    return res.status(401).json({\n                        message: 'Wrong password!'\n                    });\n                }\n            } else {\n                return res.status(401).json({\n                    message: 'Email address not in our database'\n                });\n            }\n        });\n    },\n    verifyToken: function(req, res, next) {\n        var token = req.headers['x-access-token'];\n        if (token) {\n            jwt.verify(token, 'secretKey', function(err, user) {\n                if (err) {\n                    return res.json({\n                        message: 'Token could not be authenticated'\n                    });\n                } else {\n                    req.user = user;\n                    next();\n                }\n            });\n        } else {\n            return res.status(403).json({\n                message: 'Token not found'\n            });\n        }\n    },\n    isAdmin: function(req, res, next) {\n        User.findOne({\n            email: req.user.email\n        }, function(err, user) {\n            if (err) {\n                return res.json(err);\n            }\n            if (user) {\n                if (user.role === 'admin') {\n                    next();\n                } else {\n                    return res.json({\n                        message: 'Permission denied'\n                    })\n                }\n            } else {\n                return res.json({\n                    message: 'User not found'\n                })\n            }\n        });\n    },\n    forgot: function(req, res, next) {\n\n        async.waterfall([\n            function(done) {\n                crypto.randomBytes(20, function(err, buf) {\n                    var token = buf.toString('hex');\n                    done(err, token);\n                });\n            },\n            function(token, done) {\n                User.findOne({\n                    email: req.body.email\n                }, function(err, user) {\n                    if (!user) {\n                        return res.json({\n                            message: 'No user found'\n                        });\n                    }\n\n                    user.resetPasswordToken = token;\n                    user.resetPasswordExpires = Date.now() + 3600000; // 1 hour\n\n                    user.save(function(err) {\n                        done(err, token, user);\n                    });\n                });\n            },\n            function(token, user, done) {\n                var transporter = nodemailer.createTransport();\n                var mailOptions = {\n                    to: user.email,\n                    from: 'Tango Nigeria âœ” <no-reply@tangong.com>',\n                    subject: 'Tango Password Reset',\n                    text: 'You are receiving this because you (or someone else) have requested the reset of the password for your account.\\n\\n' +\n                        'Please click on the following link, or paste this into your browser to complete the process:\\n\\n' + '\\n\\n' + 'http://andela-ssunday.github.io/tangong/#!/reset/password/' + token + '\\n\\n' +\n                        ' If you did not request this, please ignore this email and your password will remain unchanged.\\n'\n                };\n                transporter.sendMail(mailOptions, function(err, res) {\n                    done(err, 'done');\n                    return res;\n                });\n            }\n        ], function(err) {\n            if (err) return next(err);\n            res.json({\n                message: 'Message Sent!'\n            });\n        });\n    },\n    reset: function(req, res) {\n        async.waterfall([\n            function(done) {\n                User.findOne({\n                    resetPasswordToken: req.params.token,\n                    resetPasswordExpires: {\n                        $gt: Date.now()\n                    }\n                }, function(err, user) {\n                    if (!user) {\n                        return res.json({\n                            'message': 'User does not exist'\n                        });\n                    }\n\n                    user.password = req.body.password;\n                    user.resetPasswordToken = undefined;\n                    user.resetPasswordExpires = undefined;\n\n                    user.save(function(err, result) {\n                        if (err) {\n                            return res.json(err);\n                        }\n                        console.log(result);\n                        res.json(result);\n                    });\n                });\n            }\n        ], function(err) {\n            if (err) return err;\n            res.json({\n                message: 'Password changed!'\n            });\n        });\n    }\n}\n"]}