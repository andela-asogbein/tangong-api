{"version":3,"sources":["../../src/config/passport.js"],"names":["_","require","passport","request","LocalStrategy","Strategy","User","serializeUser","user","done","id","deserializeUser","findById","err","use","usernameField","email","password","findOne","toLowerCase","msg","comparePassword","isMatch","exports","isAuthenticated","req","res","next","json","message","isAuthorized","provider","path","split","slice","find","tokens","kind","redirect"],"mappings":";;AAAA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,UAAUF,QAAQ,SAAR,CAAhB;AACA,IAAMG,gBAAgBH,QAAQ,gBAAR,EAA0BI,QAAhD;;AAEA,IAAMC,OAAOL,QAAQ,sBAAR,CAAb;;AAEAC,SAASK,aAAT,CAAuB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACrCA,OAAK,IAAL,EAAWD,KAAKE,EAAhB;AACD,CAFD;;AAIAR,SAASS,eAAT,CAAyB,UAACD,EAAD,EAAKD,IAAL,EAAc;AACrCH,OAAKM,QAAL,CAAcF,EAAd,EAAkB,UAACG,GAAD,EAAML,IAAN,EAAe;AAC/BC,SAAKI,GAAL,EAAUL,IAAV;AACD,GAFD;AAGD,CAJD;;AAMA;;;AAGAN,SAASY,GAAT,CAAa,IAAIV,aAAJ,CAAkB,EAAEW,eAAe,OAAjB,EAAlB,EAA8C,UAACC,KAAD,EAAQC,QAAR,EAAkBR,IAAlB,EAA2B;AACpFH,OAAKY,OAAL,CAAa,EAAEF,OAAOA,MAAMG,WAAN,EAAT,EAAb,EAA6C,UAACN,GAAD,EAAML,IAAN,EAAe;AAC1D,QAAIK,GAAJ,EAAS;AAAE,aAAOJ,KAAKI,GAAL,CAAP;AAAmB;AAC9B,QAAI,CAACL,IAAL,EAAW;AACT,aAAOC,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEW,gBAAcJ,KAAd,gBAAF,EAAlB,CAAP;AACD;AACDR,SAAKa,eAAL,CAAqBJ,QAArB,EAA+B,UAACJ,GAAD,EAAMS,OAAN,EAAkB;AAC/C,UAAIT,GAAJ,EAAS;AAAE,eAAOJ,KAAKI,GAAL,CAAP;AAAmB;AAC9B,UAAIS,OAAJ,EAAa;AACX,eAAOb,KAAK,IAAL,EAAWD,IAAX,CAAP;AACD;AACD,aAAOC,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEW,KAAK,4BAAP,EAAlB,CAAP;AACD,KAND;AAOD,GAZD;AAaD,CAdY,CAAb;;AAgBA;;;AAGAG,QAAQC,eAAR,GAA0B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,MAAIF,IAAID,eAAJ,EAAJ,EAA2B;AACzB,WAAOG,MAAP;AACD;AACDD,MAAIE,IAAJ,CAAS,EAACC,SAAS,gBAAV,EAAT;AACD,CALD;;AAOA;;;AAGAN,QAAQO,YAAR,GAAuB,UAACL,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzC,MAAMI,WAAWN,IAAIO,IAAJ,CAASC,KAAT,CAAe,GAAf,EAAoBC,KAApB,CAA0B,CAAC,CAA3B,EAA8B,CAA9B,CAAjB;;AAEA,MAAIlC,EAAEmC,IAAF,CAAOV,IAAIjB,IAAJ,CAAS4B,MAAhB,EAAwB,EAAEC,MAAMN,QAAR,EAAxB,CAAJ,EAAiD;AAC/CJ;AACD,GAFD,MAEO;AACLD,QAAIY,QAAJ,YAAsBP,QAAtB;AACD;AACF,CARD","file":"passport.js","sourcesContent":["const _ = require('lodash');\nconst passport = require('passport');\nconst request = require('request');\nconst LocalStrategy = require('passport-local').Strategy;\n\nconst User = require('../models/user.model');\n\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n  User.findById(id, (err, user) => {\n    done(err, user);\n  });\n});\n\n/**\n * Sign in using Email and Password.\n */\npassport.use(new LocalStrategy({ usernameField: 'email' }, (email, password, done) => {\n  User.findOne({ email: email.toLowerCase() }, (err, user) => {\n    if (err) { return done(err); }\n    if (!user) {\n      return done(null, false, { msg: `Email ${email} not found.` });\n    }\n    user.comparePassword(password, (err, isMatch) => {\n      if (err) { return done(err); }\n      if (isMatch) {\n        return done(null, user);\n      }\n      return done(null, false, { msg: 'Invalid email or password.' });\n    });\n  });\n}));\n\n/**\n * Login Required middleware.\n */\nexports.isAuthenticated = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.json({message: 'User not found'});\n};\n\n/**\n * Authorization Required middleware.\n */\nexports.isAuthorized = (req, res, next) => {\n  const provider = req.path.split('/').slice(-1)[0];\n\n  if (_.find(req.user.tokens, { kind: provider })) {\n    next();\n  } else {\n    res.redirect(`/auth/${provider}`);\n  }\n};\n"]}